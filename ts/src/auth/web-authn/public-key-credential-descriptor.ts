// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { AuthenticatorTransport } from '../../auth/web-authn/authenticator-transport.js';


export class PublicKeyCredentialDescriptor implements flatbuffers.IUnpackableObject<PublicKeyCredentialDescriptorT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PublicKeyCredentialDescriptor {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPublicKeyCredentialDescriptor(bb:flatbuffers.ByteBuffer, obj?:PublicKeyCredentialDescriptor):PublicKeyCredentialDescriptor {
  return (obj || new PublicKeyCredentialDescriptor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPublicKeyCredentialDescriptor(bb:flatbuffers.ByteBuffer, obj?:PublicKeyCredentialDescriptor):PublicKeyCredentialDescriptor {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PublicKeyCredentialDescriptor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * The type of credential to exclude.
 */
type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The credential ID to exclude.
 */
id(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

idLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

idArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * The transports that are allowed for this credential.
 */
transports(index: number):AuthenticatorTransport|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

transportsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

transportsArray():Int8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Int8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startPublicKeyCredentialDescriptor(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, typeOffset, 0);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idOffset, 0);
}

static createIdVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startIdVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addTransports(builder:flatbuffers.Builder, transportsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, transportsOffset, 0);
}

static createTransportsVector(builder:flatbuffers.Builder, data:AuthenticatorTransport[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startTransportsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endPublicKeyCredentialDescriptor(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPublicKeyCredentialDescriptor(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset, idOffset:flatbuffers.Offset, transportsOffset:flatbuffers.Offset):flatbuffers.Offset {
  PublicKeyCredentialDescriptor.startPublicKeyCredentialDescriptor(builder);
  PublicKeyCredentialDescriptor.addType(builder, typeOffset);
  PublicKeyCredentialDescriptor.addId(builder, idOffset);
  PublicKeyCredentialDescriptor.addTransports(builder, transportsOffset);
  return PublicKeyCredentialDescriptor.endPublicKeyCredentialDescriptor(builder);
}

unpack(): PublicKeyCredentialDescriptorT {
  return new PublicKeyCredentialDescriptorT(
    this.type(),
    this.bb!.createScalarList<number>(this.id.bind(this), this.idLength()),
    this.bb!.createScalarList<AuthenticatorTransport>(this.transports.bind(this), this.transportsLength())
  );
}


unpackTo(_o: PublicKeyCredentialDescriptorT): void {
  _o.type = this.type();
  _o.id = this.bb!.createScalarList<number>(this.id.bind(this), this.idLength());
  _o.transports = this.bb!.createScalarList<AuthenticatorTransport>(this.transports.bind(this), this.transportsLength());
}
}

export class PublicKeyCredentialDescriptorT implements flatbuffers.IGeneratedObject {
constructor(
  public type: string|Uint8Array|null = null,
  public id: (number)[] = [],
  public transports: (AuthenticatorTransport)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const type = (this.type !== null ? builder.createString(this.type!) : 0);
  const id = PublicKeyCredentialDescriptor.createIdVector(builder, this.id);
  const transports = PublicKeyCredentialDescriptor.createTransportsVector(builder, this.transports);

  return PublicKeyCredentialDescriptor.createPublicKeyCredentialDescriptor(builder,
    type,
    id,
    transports
  );
}
}
