// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { AuthenticatorAttestationResponse, AuthenticatorAttestationResponseT } from '../../auth/web-authn/authenticator-attestation-response.js';
import { RegistrationExtensionsClientOutputs, RegistrationExtensionsClientOutputsT } from '../../auth/web-authn/registration-extensions-client-outputs.js';


export class RegisterPublicKeyCredential implements flatbuffers.IUnpackableObject<RegisterPublicKeyCredentialT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RegisterPublicKeyCredential {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRegisterPublicKeyCredential(bb:flatbuffers.ByteBuffer, obj?:RegisterPublicKeyCredential):RegisterPublicKeyCredential {
  return (obj || new RegisterPublicKeyCredential()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRegisterPublicKeyCredential(bb:flatbuffers.ByteBuffer, obj?:RegisterPublicKeyCredential):RegisterPublicKeyCredential {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RegisterPublicKeyCredential()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

idLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

idArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

rawId(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

rawIdLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

rawIdArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

response(obj?:AuthenticatorAttestationResponse):AuthenticatorAttestationResponse|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new AuthenticatorAttestationResponse()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

clientExtensionResults(obj?:RegistrationExtensionsClientOutputs):RegistrationExtensionsClientOutputs|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new RegistrationExtensionsClientOutputs()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startRegisterPublicKeyCredential(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static createIdVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startIdVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addRawId(builder:flatbuffers.Builder, rawIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, rawIdOffset, 0);
}

static createRawIdVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startRawIdVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addResponse(builder:flatbuffers.Builder, responseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, responseOffset, 0);
}

static addClientExtensionResults(builder:flatbuffers.Builder, clientExtensionResultsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, clientExtensionResultsOffset, 0);
}

static endRegisterPublicKeyCredential(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): RegisterPublicKeyCredentialT {
  return new RegisterPublicKeyCredentialT(
    this.bb!.createScalarList<number>(this.id.bind(this), this.idLength()),
    this.bb!.createScalarList<number>(this.rawId.bind(this), this.rawIdLength()),
    (this.response() !== null ? this.response()!.unpack() : null),
    (this.clientExtensionResults() !== null ? this.clientExtensionResults()!.unpack() : null)
  );
}


unpackTo(_o: RegisterPublicKeyCredentialT): void {
  _o.id = this.bb!.createScalarList<number>(this.id.bind(this), this.idLength());
  _o.rawId = this.bb!.createScalarList<number>(this.rawId.bind(this), this.rawIdLength());
  _o.response = (this.response() !== null ? this.response()!.unpack() : null);
  _o.clientExtensionResults = (this.clientExtensionResults() !== null ? this.clientExtensionResults()!.unpack() : null);
}
}

export class RegisterPublicKeyCredentialT implements flatbuffers.IGeneratedObject {
constructor(
  public id: (number)[] = [],
  public rawId: (number)[] = [],
  public response: AuthenticatorAttestationResponseT|null = null,
  public clientExtensionResults: RegistrationExtensionsClientOutputsT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = RegisterPublicKeyCredential.createIdVector(builder, this.id);
  const rawId = RegisterPublicKeyCredential.createRawIdVector(builder, this.rawId);
  const response = (this.response !== null ? this.response!.pack(builder) : 0);
  const clientExtensionResults = (this.clientExtensionResults !== null ? this.clientExtensionResults!.pack(builder) : 0);

  RegisterPublicKeyCredential.startRegisterPublicKeyCredential(builder);
  RegisterPublicKeyCredential.addId(builder, id);
  RegisterPublicKeyCredential.addRawId(builder, rawId);
  RegisterPublicKeyCredential.addResponse(builder, response);
  RegisterPublicKeyCredential.addClientExtensionResults(builder, clientExtensionResults);

  return RegisterPublicKeyCredential.endRegisterPublicKeyCredential(builder);
}
}
