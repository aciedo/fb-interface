// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { AuthenticatorTransport } from '../../auth/web-authn/authenticator-transport.js';


export class AuthenticatorAttestationResponse implements flatbuffers.IUnpackableObject<AuthenticatorAttestationResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AuthenticatorAttestationResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAuthenticatorAttestationResponse(bb:flatbuffers.ByteBuffer, obj?:AuthenticatorAttestationResponse):AuthenticatorAttestationResponse {
  return (obj || new AuthenticatorAttestationResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAuthenticatorAttestationResponse(bb:flatbuffers.ByteBuffer, obj?:AuthenticatorAttestationResponse):AuthenticatorAttestationResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AuthenticatorAttestationResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

clientData(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

clientDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

clientDataArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

attestationObject(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

attestationObjectLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

attestationObjectArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

transports(index: number):AuthenticatorTransport|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

transportsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

transportsArray():Int8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Int8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startAuthenticatorAttestationResponse(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addClientData(builder:flatbuffers.Builder, clientDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, clientDataOffset, 0);
}

static createClientDataVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startClientDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addAttestationObject(builder:flatbuffers.Builder, attestationObjectOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, attestationObjectOffset, 0);
}

static createAttestationObjectVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startAttestationObjectVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addTransports(builder:flatbuffers.Builder, transportsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, transportsOffset, 0);
}

static createTransportsVector(builder:flatbuffers.Builder, data:AuthenticatorTransport[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startTransportsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endAuthenticatorAttestationResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAuthenticatorAttestationResponse(builder:flatbuffers.Builder, clientDataOffset:flatbuffers.Offset, attestationObjectOffset:flatbuffers.Offset, transportsOffset:flatbuffers.Offset):flatbuffers.Offset {
  AuthenticatorAttestationResponse.startAuthenticatorAttestationResponse(builder);
  AuthenticatorAttestationResponse.addClientData(builder, clientDataOffset);
  AuthenticatorAttestationResponse.addAttestationObject(builder, attestationObjectOffset);
  AuthenticatorAttestationResponse.addTransports(builder, transportsOffset);
  return AuthenticatorAttestationResponse.endAuthenticatorAttestationResponse(builder);
}

unpack(): AuthenticatorAttestationResponseT {
  return new AuthenticatorAttestationResponseT(
    this.bb!.createScalarList<number>(this.clientData.bind(this), this.clientDataLength()),
    this.bb!.createScalarList<number>(this.attestationObject.bind(this), this.attestationObjectLength()),
    this.bb!.createScalarList<AuthenticatorTransport>(this.transports.bind(this), this.transportsLength())
  );
}


unpackTo(_o: AuthenticatorAttestationResponseT): void {
  _o.clientData = this.bb!.createScalarList<number>(this.clientData.bind(this), this.clientDataLength());
  _o.attestationObject = this.bb!.createScalarList<number>(this.attestationObject.bind(this), this.attestationObjectLength());
  _o.transports = this.bb!.createScalarList<AuthenticatorTransport>(this.transports.bind(this), this.transportsLength());
}
}

export class AuthenticatorAttestationResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public clientData: (number)[] = [],
  public attestationObject: (number)[] = [],
  public transports: (AuthenticatorTransport)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const clientData = AuthenticatorAttestationResponse.createClientDataVector(builder, this.clientData);
  const attestationObject = AuthenticatorAttestationResponse.createAttestationObjectVector(builder, this.attestationObject);
  const transports = AuthenticatorAttestationResponse.createTransportsVector(builder, this.transports);

  return AuthenticatorAttestationResponse.createAuthenticatorAttestationResponse(builder,
    clientData,
    attestationObject,
    transports
  );
}
}
