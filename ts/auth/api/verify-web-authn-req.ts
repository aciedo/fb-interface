// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { RegisterPublicKeyCredential, RegisterPublicKeyCredentialT } from '../../auth/web-authn/register-public-key-credential.js';


export class VerifyWebAuthnReq implements flatbuffers.IUnpackableObject<VerifyWebAuthnReqT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VerifyWebAuthnReq {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVerifyWebAuthnReq(bb:flatbuffers.ByteBuffer, obj?:VerifyWebAuthnReq):VerifyWebAuthnReq {
  return (obj || new VerifyWebAuthnReq()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVerifyWebAuthnReq(bb:flatbuffers.ByteBuffer, obj?:VerifyWebAuthnReq):VerifyWebAuthnReq {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VerifyWebAuthnReq()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

webauthn(obj?:RegisterPublicKeyCredential):RegisterPublicKeyCredential|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new RegisterPublicKeyCredential()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startVerifyWebAuthnReq(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, idOffset, 0);
}

static addWebauthn(builder:flatbuffers.Builder, webauthnOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, webauthnOffset, 0);
}

static endVerifyWebAuthnReq(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): VerifyWebAuthnReqT {
  return new VerifyWebAuthnReqT(
    this.name(),
    this.id(),
    (this.webauthn() !== null ? this.webauthn()!.unpack() : null)
  );
}


unpackTo(_o: VerifyWebAuthnReqT): void {
  _o.name = this.name();
  _o.id = this.id();
  _o.webauthn = (this.webauthn() !== null ? this.webauthn()!.unpack() : null);
}
}

export class VerifyWebAuthnReqT implements flatbuffers.IGeneratedObject {
constructor(
  public name: string|Uint8Array|null = null,
  public id: string|Uint8Array|null = null,
  public webauthn: RegisterPublicKeyCredentialT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const id = (this.id !== null ? builder.createString(this.id!) : 0);
  const webauthn = (this.webauthn !== null ? this.webauthn!.pack(builder) : 0);

  VerifyWebAuthnReq.startVerifyWebAuthnReq(builder);
  VerifyWebAuthnReq.addName(builder, name);
  VerifyWebAuthnReq.addId(builder, id);
  VerifyWebAuthnReq.addWebauthn(builder, webauthn);

  return VerifyWebAuthnReq.endVerifyWebAuthnReq(builder);
}
}
