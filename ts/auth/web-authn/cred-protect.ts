// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CredentialProtectionPolicy } from '../../auth/web-authn/credential-protection-policy.js';


export class CredProtect implements flatbuffers.IUnpackableObject<CredProtectT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CredProtect {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCredProtect(bb:flatbuffers.ByteBuffer, obj?:CredProtect):CredProtect {
  return (obj || new CredProtect()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCredProtect(bb:flatbuffers.ByteBuffer, obj?:CredProtect):CredProtect {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CredProtect()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * The credential policy to enact
 */
credentialProtectionPolicy():CredentialProtectionPolicy {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : CredentialProtectionPolicy.UserVerificationOptional;
}

/**
 * Whether it is better for the authenticator to fail to create a
 * credential rather than ignore the protection policy
 */
enforceCredentialProtectionPolicy():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startCredProtect(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addCredentialProtectionPolicy(builder:flatbuffers.Builder, credentialProtectionPolicy:CredentialProtectionPolicy) {
  builder.addFieldInt8(0, credentialProtectionPolicy, CredentialProtectionPolicy.UserVerificationOptional);
}

static addEnforceCredentialProtectionPolicy(builder:flatbuffers.Builder, enforceCredentialProtectionPolicy:boolean) {
  builder.addFieldInt8(1, +enforceCredentialProtectionPolicy, +false);
}

static endCredProtect(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCredProtect(builder:flatbuffers.Builder, credentialProtectionPolicy:CredentialProtectionPolicy, enforceCredentialProtectionPolicy:boolean):flatbuffers.Offset {
  CredProtect.startCredProtect(builder);
  CredProtect.addCredentialProtectionPolicy(builder, credentialProtectionPolicy);
  CredProtect.addEnforceCredentialProtectionPolicy(builder, enforceCredentialProtectionPolicy);
  return CredProtect.endCredProtect(builder);
}

unpack(): CredProtectT {
  return new CredProtectT(
    this.credentialProtectionPolicy(),
    this.enforceCredentialProtectionPolicy()
  );
}


unpackTo(_o: CredProtectT): void {
  _o.credentialProtectionPolicy = this.credentialProtectionPolicy();
  _o.enforceCredentialProtectionPolicy = this.enforceCredentialProtectionPolicy();
}
}

export class CredProtectT implements flatbuffers.IGeneratedObject {
constructor(
  public credentialProtectionPolicy: CredentialProtectionPolicy = CredentialProtectionPolicy.UserVerificationOptional,
  public enforceCredentialProtectionPolicy: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return CredProtect.createCredProtect(builder,
    this.credentialProtectionPolicy,
    this.enforceCredentialProtectionPolicy
  );
}
}
