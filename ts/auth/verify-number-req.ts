// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class VerifyNumberReq implements flatbuffers.IUnpackableObject<VerifyNumberReqT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VerifyNumberReq {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVerifyNumberReq(bb:flatbuffers.ByteBuffer, obj?:VerifyNumberReq):VerifyNumberReq {
  return (obj || new VerifyNumberReq()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVerifyNumberReq(bb:flatbuffers.ByteBuffer, obj?:VerifyNumberReq):VerifyNumberReq {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VerifyNumberReq()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

number():string|null
number(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
number(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

code():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startVerifyNumberReq(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addNumber(builder:flatbuffers.Builder, numberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, numberOffset, 0);
}

static addCode(builder:flatbuffers.Builder, code:bigint) {
  builder.addFieldInt64(1, code, BigInt('0'));
}

static endVerifyNumberReq(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createVerifyNumberReq(builder:flatbuffers.Builder, numberOffset:flatbuffers.Offset, code:bigint):flatbuffers.Offset {
  VerifyNumberReq.startVerifyNumberReq(builder);
  VerifyNumberReq.addNumber(builder, numberOffset);
  VerifyNumberReq.addCode(builder, code);
  return VerifyNumberReq.endVerifyNumberReq(builder);
}

unpack(): VerifyNumberReqT {
  return new VerifyNumberReqT(
    this.number(),
    this.code()
  );
}


unpackTo(_o: VerifyNumberReqT): void {
  _o.number = this.number();
  _o.code = this.code();
}
}

export class VerifyNumberReqT implements flatbuffers.IGeneratedObject {
constructor(
  public number: string|Uint8Array|null = null,
  public code: bigint = BigInt('0')
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const number = (this.number !== null ? builder.createString(this.number!) : 0);

  return VerifyNumberReq.createVerifyNumberReq(builder,
    number,
    this.code
  );
}
}
