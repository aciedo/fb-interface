// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class RegisterNumberReq implements flatbuffers.IUnpackableObject<RegisterNumberReqT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RegisterNumberReq {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRegisterNumberReq(bb:flatbuffers.ByteBuffer, obj?:RegisterNumberReq):RegisterNumberReq {
  return (obj || new RegisterNumberReq()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRegisterNumberReq(bb:flatbuffers.ByteBuffer, obj?:RegisterNumberReq):RegisterNumberReq {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RegisterNumberReq()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * The name of the user to register.
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * The phone number to register.
 */
number():string|null
number(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
number(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startRegisterNumberReq(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addNumber(builder:flatbuffers.Builder, numberOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, numberOffset, 0);
}

static endRegisterNumberReq(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRegisterNumberReq(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, numberOffset:flatbuffers.Offset):flatbuffers.Offset {
  RegisterNumberReq.startRegisterNumberReq(builder);
  RegisterNumberReq.addName(builder, nameOffset);
  RegisterNumberReq.addNumber(builder, numberOffset);
  return RegisterNumberReq.endRegisterNumberReq(builder);
}

unpack(): RegisterNumberReqT {
  return new RegisterNumberReqT(
    this.name(),
    this.number()
  );
}


unpackTo(_o: RegisterNumberReqT): void {
  _o.name = this.name();
  _o.number = this.number();
}
}

export class RegisterNumberReqT implements flatbuffers.IGeneratedObject {
constructor(
  public name: string|Uint8Array|null = null,
  public number: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const number = (this.number !== null ? builder.createString(this.number!) : 0);

  return RegisterNumberReq.createRegisterNumberReq(builder,
    name,
    number
  );
}
}
