// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class NumberRegistration implements flatbuffers.IUnpackableObject<NumberRegistrationT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):NumberRegistration {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNumberRegistration(bb:flatbuffers.ByteBuffer, obj?:NumberRegistration):NumberRegistration {
  return (obj || new NumberRegistration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNumberRegistration(bb:flatbuffers.ByteBuffer, obj?:NumberRegistration):NumberRegistration {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NumberRegistration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

code():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startNumberRegistration(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addCode(builder:flatbuffers.Builder, code:bigint) {
  builder.addFieldInt64(1, code, BigInt('0'));
}

static endNumberRegistration(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createNumberRegistration(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, code:bigint):flatbuffers.Offset {
  NumberRegistration.startNumberRegistration(builder);
  NumberRegistration.addName(builder, nameOffset);
  NumberRegistration.addCode(builder, code);
  return NumberRegistration.endNumberRegistration(builder);
}

unpack(): NumberRegistrationT {
  return new NumberRegistrationT(
    this.name(),
    this.code()
  );
}


unpackTo(_o: NumberRegistrationT): void {
  _o.name = this.name();
  _o.code = this.code();
}
}

export class NumberRegistrationT implements flatbuffers.IGeneratedObject {
constructor(
  public name: string|Uint8Array|null = null,
  public code: bigint = BigInt('0')
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);

  return NumberRegistration.createNumberRegistration(builder,
    name,
    this.code
  );
}
}
