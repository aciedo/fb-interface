// automatically generated by the FlatBuffers compiler, do not modify

package Auth.KV

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Kept permanently to look up a number. The number is hashed, peppered and 
 * then hashed again. To lookup the number, the client hashes the number and 
 * sends it to the server. The server peppers the hash and hashes it again.
 * We could work out the original phone number if we really wanted to, but
 * this is more for protecting against breaches of the database. The pepper is
 * a secret that's encrypted and only available to the server, even in the case
 * of a breach.
 */
@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class VerifiedNumber : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : VerifiedNumber {
        __init(_i, _bb)
        return this
    }
    /**
     * Display name of the user
     */
    val name : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * A link to the user's avatar image
     */
    val avatar : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val avatarAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun avatarInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The account the number is registered to. 32 bytes, encoded with base58
     * This is used to contact the user's durable object
     */
    val id : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_1_4()
        fun getRootAsVerifiedNumber(_bb: ByteBuffer): VerifiedNumber = getRootAsVerifiedNumber(_bb, VerifiedNumber())
        fun getRootAsVerifiedNumber(_bb: ByteBuffer, obj: VerifiedNumber): VerifiedNumber {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createVerifiedNumber(builder: FlatBufferBuilder, nameOffset: Int, avatarOffset: Int, idOffset: Int) : Int {
            builder.startTable(3)
            addId(builder, idOffset)
            addAvatar(builder, avatarOffset)
            addName(builder, nameOffset)
            return endVerifiedNumber(builder)
        }
        fun startVerifiedNumber(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(0, name, 0)
        fun addAvatar(builder: FlatBufferBuilder, avatar: Int) = builder.addOffset(1, avatar, 0)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(2, id, 0)
        fun endVerifiedNumber(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
