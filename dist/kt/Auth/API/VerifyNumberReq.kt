// automatically generated by the FlatBuffers compiler, do not modify

package Auth.API

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class VerifyNumberReq : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : VerifyNumberReq {
        __init(_i, _bb)
        return this
    }
    /**
     * The user's number.
     */
    val number : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val numberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun numberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The code to verify.
     */
    val code : ULong
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getLong(o + bb_pos).toULong() else 0UL
        }
    fun mutateCode(code: ULong) : Boolean {
        val o = __offset(6)
        return if (o != 0) {
            bb.putLong(o + bb_pos, code.toLong())
            true
        } else {
            false
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_1_4()
        fun getRootAsVerifyNumberReq(_bb: ByteBuffer): VerifyNumberReq = getRootAsVerifyNumberReq(_bb, VerifyNumberReq())
        fun getRootAsVerifyNumberReq(_bb: ByteBuffer, obj: VerifyNumberReq): VerifyNumberReq {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createVerifyNumberReq(builder: FlatBufferBuilder, numberOffset: Int, code: ULong) : Int {
            builder.startTable(2)
            addCode(builder, code)
            addNumber(builder, numberOffset)
            return endVerifyNumberReq(builder)
        }
        fun startVerifyNumberReq(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addNumber(builder: FlatBufferBuilder, number: Int) = builder.addOffset(0, number, 0)
        fun addCode(builder: FlatBufferBuilder, code: ULong) = builder.addLong(1, code.toLong(), 0)
        fun endVerifyNumberReq(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
