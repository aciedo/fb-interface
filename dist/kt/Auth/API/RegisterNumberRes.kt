// automatically generated by the FlatBuffers compiler, do not modify

package Auth.API

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class RegisterNumberRes : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : RegisterNumberRes {
        __init(_i, _bb)
        return this
    }
    /**
     * A value to multiply the code by for VerifyNumberReq
     */
    val multiplier : UInt
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    fun mutateMultiplier(multiplier: UInt) : Boolean {
        val o = __offset(4)
        return if (o != 0) {
            bb.putInt(o + bb_pos, multiplier.toInt())
            true
        } else {
            false
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_1_4()
        fun getRootAsRegisterNumberRes(_bb: ByteBuffer): RegisterNumberRes = getRootAsRegisterNumberRes(_bb, RegisterNumberRes())
        fun getRootAsRegisterNumberRes(_bb: ByteBuffer, obj: RegisterNumberRes): RegisterNumberRes {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createRegisterNumberRes(builder: FlatBufferBuilder, multiplier: UInt) : Int {
            builder.startTable(1)
            addMultiplier(builder, multiplier)
            return endRegisterNumberRes(builder)
        }
        fun startRegisterNumberRes(builder: FlatBufferBuilder) = builder.startTable(1)
        fun addMultiplier(builder: FlatBufferBuilder, multiplier: UInt) = builder.addInt(0, multiplier.toInt(), 0)
        fun endRegisterNumberRes(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
