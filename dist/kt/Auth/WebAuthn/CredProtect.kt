// automatically generated by the FlatBuffers compiler, do not modify

package Auth.WebAuthn

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class CredProtect : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : CredProtect {
        __init(_i, _bb)
        return this
    }
    /**
     * The credential policy to enact
     */
    val credentialProtectionPolicy : Byte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    fun mutateCredentialProtectionPolicy(credentialProtectionPolicy: Byte) : Boolean {
        val o = __offset(4)
        return if (o != 0) {
            bb.put(o + bb_pos, credentialProtectionPolicy)
            true
        } else {
            false
        }
    }
    /**
     * Whether it is better for the authenticator to fail to create a
     * credential rather than ignore the protection policy
     */
    val enforceCredentialProtectionPolicy : Boolean
        get() {
            val o = __offset(6)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    fun mutateEnforceCredentialProtectionPolicy(enforceCredentialProtectionPolicy: Boolean) : Boolean {
        val o = __offset(6)
        return if (o != 0) {
            bb.put(o + bb_pos, (if(enforceCredentialProtectionPolicy) 1 else 0).toByte())
            true
        } else {
            false
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_1_4()
        fun getRootAsCredProtect(_bb: ByteBuffer): CredProtect = getRootAsCredProtect(_bb, CredProtect())
        fun getRootAsCredProtect(_bb: ByteBuffer, obj: CredProtect): CredProtect {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createCredProtect(builder: FlatBufferBuilder, credentialProtectionPolicy: Byte, enforceCredentialProtectionPolicy: Boolean) : Int {
            builder.startTable(2)
            addEnforceCredentialProtectionPolicy(builder, enforceCredentialProtectionPolicy)
            addCredentialProtectionPolicy(builder, credentialProtectionPolicy)
            return endCredProtect(builder)
        }
        fun startCredProtect(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addCredentialProtectionPolicy(builder: FlatBufferBuilder, credentialProtectionPolicy: Byte) = builder.addByte(0, credentialProtectionPolicy, 0)
        fun addEnforceCredentialProtectionPolicy(builder: FlatBufferBuilder, enforceCredentialProtectionPolicy: Boolean) = builder.addBoolean(1, enforceCredentialProtectionPolicy, false)
        fun endCredProtect(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
