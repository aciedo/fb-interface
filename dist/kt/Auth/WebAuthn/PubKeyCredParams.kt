// automatically generated by the FlatBuffers compiler, do not modify

package Auth.WebAuthn

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class PubKeyCredParams : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : PubKeyCredParams {
        __init(_i, _bb)
        return this
    }
    val type : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val alg : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    fun mutateAlg(alg: Int) : Boolean {
        val o = __offset(6)
        return if (o != 0) {
            bb.putInt(o + bb_pos, alg)
            true
        } else {
            false
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_1_4()
        fun getRootAsPubKeyCredParams(_bb: ByteBuffer): PubKeyCredParams = getRootAsPubKeyCredParams(_bb, PubKeyCredParams())
        fun getRootAsPubKeyCredParams(_bb: ByteBuffer, obj: PubKeyCredParams): PubKeyCredParams {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createPubKeyCredParams(builder: FlatBufferBuilder, typeOffset: Int, alg: Int) : Int {
            builder.startTable(2)
            addAlg(builder, alg)
            addType(builder, typeOffset)
            return endPubKeyCredParams(builder)
        }
        fun startPubKeyCredParams(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(0, type, 0)
        fun addAlg(builder: FlatBufferBuilder, alg: Int) = builder.addInt(1, alg, 0)
        fun endPubKeyCredParams(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
