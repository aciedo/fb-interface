// automatically generated by the FlatBuffers compiler, do not modify

package Auth.WebAuthn

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class RegistrationExtensionsClientOutputs : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : RegistrationExtensionsClientOutputs {
        __init(_i, _bb)
        return this
    }
    val appId : Boolean
        get() {
            val o = __offset(4)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    fun mutateAppId(appId: Boolean) : Boolean {
        val o = __offset(4)
        return if (o != 0) {
            bb.put(o + bb_pos, (if(appId) 1 else 0).toByte())
            true
        } else {
            false
        }
    }
    val credProps : Boolean
        get() {
            val o = __offset(6)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    fun mutateCredProps(credProps: Boolean) : Boolean {
        val o = __offset(6)
        return if (o != 0) {
            bb.put(o + bb_pos, (if(credProps) 1 else 0).toByte())
            true
        } else {
            false
        }
    }
    val hmacSecret : Boolean
        get() {
            val o = __offset(8)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    fun mutateHmacSecret(hmacSecret: Boolean) : Boolean {
        val o = __offset(8)
        return if (o != 0) {
            bb.put(o + bb_pos, (if(hmacSecret) 1 else 0).toByte())
            true
        } else {
            false
        }
    }
    val credProtect : Byte
        get() {
            val o = __offset(10)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    fun mutateCredProtect(credProtect: Byte) : Boolean {
        val o = __offset(10)
        return if (o != 0) {
            bb.put(o + bb_pos, credProtect)
            true
        } else {
            false
        }
    }
    val minPinLength : UInt
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    fun mutateMinPinLength(minPinLength: UInt) : Boolean {
        val o = __offset(12)
        return if (o != 0) {
            bb.putInt(o + bb_pos, minPinLength.toInt())
            true
        } else {
            false
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_1_4()
        fun getRootAsRegistrationExtensionsClientOutputs(_bb: ByteBuffer): RegistrationExtensionsClientOutputs = getRootAsRegistrationExtensionsClientOutputs(_bb, RegistrationExtensionsClientOutputs())
        fun getRootAsRegistrationExtensionsClientOutputs(_bb: ByteBuffer, obj: RegistrationExtensionsClientOutputs): RegistrationExtensionsClientOutputs {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createRegistrationExtensionsClientOutputs(builder: FlatBufferBuilder, appId: Boolean, credProps: Boolean, hmacSecret: Boolean, credProtect: Byte, minPinLength: UInt) : Int {
            builder.startTable(5)
            addMinPinLength(builder, minPinLength)
            addCredProtect(builder, credProtect)
            addHmacSecret(builder, hmacSecret)
            addCredProps(builder, credProps)
            addAppId(builder, appId)
            return endRegistrationExtensionsClientOutputs(builder)
        }
        fun startRegistrationExtensionsClientOutputs(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addAppId(builder: FlatBufferBuilder, appId: Boolean) = builder.addBoolean(0, appId, false)
        fun addCredProps(builder: FlatBufferBuilder, credProps: Boolean) = builder.addBoolean(1, credProps, false)
        fun addHmacSecret(builder: FlatBufferBuilder, hmacSecret: Boolean) = builder.addBoolean(2, hmacSecret, false)
        fun addCredProtect(builder: FlatBufferBuilder, credProtect: Byte) = builder.addByte(3, credProtect, 0)
        fun addMinPinLength(builder: FlatBufferBuilder, minPinLength: UInt) = builder.addInt(4, minPinLength.toInt(), 0)
        fun endRegistrationExtensionsClientOutputs(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
