// automatically generated by the FlatBuffers compiler, do not modify

package Auth.WebAuthn

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class RequestRegistrationExtensions : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : RequestRegistrationExtensions {
        __init(_i, _bb)
        return this
    }
    /**
     * The `credProtect` extension options
     */
    val credProtect : Auth.WebAuthn.CredProtect? get() = credProtect(Auth.WebAuthn.CredProtect())
    fun credProtect(obj: Auth.WebAuthn.CredProtect) : Auth.WebAuthn.CredProtect? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    /**
     * ⚠️  - Browsers do not support this!
     */
    val uvm : Boolean
        get() {
            val o = __offset(6)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    fun mutateUvm(uvm: Boolean) : Boolean {
        val o = __offset(6)
        return if (o != 0) {
            bb.put(o + bb_pos, (if(uvm) 1 else 0).toByte())
            true
        } else {
            false
        }
    }
    /**
     * ⚠️  - This extension result is always unsigned, and only indicates if the
     * browser *requests* a residentKey to be created. It has no bearing on the
     * true rk state of the credential.
     */
    val credProps : Boolean
        get() {
            val o = __offset(8)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    fun mutateCredProps(credProps: Boolean) : Boolean {
        val o = __offset(8)
        return if (o != 0) {
            bb.put(o + bb_pos, (if(credProps) 1 else 0).toByte())
            true
        } else {
            false
        }
    }
    /**
     * CTAP2.1 Minumum pin length
     */
    val minPinLength : Boolean
        get() {
            val o = __offset(10)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    fun mutateMinPinLength(minPinLength: Boolean) : Boolean {
        val o = __offset(10)
        return if (o != 0) {
            bb.put(o + bb_pos, (if(minPinLength) 1 else 0).toByte())
            true
        } else {
            false
        }
    }
    /**
     * ⚠️  - Browsers support the *creation* of the secret, but not the retrieval of it.
     * CTAP2.1 create hmac secret
     */
    val hmacCreateSecret : Boolean
        get() {
            val o = __offset(12)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    fun mutateHmacCreateSecret(hmacCreateSecret: Boolean) : Boolean {
        val o = __offset(12)
        return if (o != 0) {
            bb.put(o + bb_pos, (if(hmacCreateSecret) 1 else 0).toByte())
            true
        } else {
            false
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_1_4()
        fun getRootAsRequestRegistrationExtensions(_bb: ByteBuffer): RequestRegistrationExtensions = getRootAsRequestRegistrationExtensions(_bb, RequestRegistrationExtensions())
        fun getRootAsRequestRegistrationExtensions(_bb: ByteBuffer, obj: RequestRegistrationExtensions): RequestRegistrationExtensions {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createRequestRegistrationExtensions(builder: FlatBufferBuilder, credProtectOffset: Int, uvm: Boolean, credProps: Boolean, minPinLength: Boolean, hmacCreateSecret: Boolean) : Int {
            builder.startTable(5)
            addCredProtect(builder, credProtectOffset)
            addHmacCreateSecret(builder, hmacCreateSecret)
            addMinPinLength(builder, minPinLength)
            addCredProps(builder, credProps)
            addUvm(builder, uvm)
            return endRequestRegistrationExtensions(builder)
        }
        fun startRequestRegistrationExtensions(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addCredProtect(builder: FlatBufferBuilder, credProtect: Int) = builder.addOffset(0, credProtect, 0)
        fun addUvm(builder: FlatBufferBuilder, uvm: Boolean) = builder.addBoolean(1, uvm, false)
        fun addCredProps(builder: FlatBufferBuilder, credProps: Boolean) = builder.addBoolean(2, credProps, false)
        fun addMinPinLength(builder: FlatBufferBuilder, minPinLength: Boolean) = builder.addBoolean(3, minPinLength, false)
        fun addHmacCreateSecret(builder: FlatBufferBuilder, hmacCreateSecret: Boolean) = builder.addBoolean(4, hmacCreateSecret, false)
        fun endRequestRegistrationExtensions(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
