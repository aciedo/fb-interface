// automatically generated by the FlatBuffers compiler, do not modify

package Auth.WebAuthn

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
@kotlin.ExperimentalUnsignedTypes
class RegisterPublicKeyCredential : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : RegisterPublicKeyCredential {
        __init(_i, _bb)
        return this
    }
    fun id(j: Int) : UByte {
        val o = __offset(4)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1).toUByte()
        } else {
            0u
        }
    }
    val idLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    fun mutateId(j: Int, id: UByte) : Boolean {
        val o = __offset(4)
        return if (o != 0) {
            bb.put(__vector(o) + j * 1, id.toByte())
            true
        } else {
            false
        }
    }
    fun rawId(j: Int) : UByte {
        val o = __offset(6)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1).toUByte()
        } else {
            0u
        }
    }
    val rawIdLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    val rawIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun rawIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    fun mutateRawId(j: Int, rawId: UByte) : Boolean {
        val o = __offset(6)
        return if (o != 0) {
            bb.put(__vector(o) + j * 1, rawId.toByte())
            true
        } else {
            false
        }
    }
    val response : Auth.WebAuthn.AuthenticatorAttestationResponse? get() = response(Auth.WebAuthn.AuthenticatorAttestationResponse())
    fun response(obj: Auth.WebAuthn.AuthenticatorAttestationResponse) : Auth.WebAuthn.AuthenticatorAttestationResponse? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val clientExtensionResults : Auth.WebAuthn.RegistrationExtensionsClientOutputs? get() = clientExtensionResults(Auth.WebAuthn.RegistrationExtensionsClientOutputs())
    fun clientExtensionResults(obj: Auth.WebAuthn.RegistrationExtensionsClientOutputs) : Auth.WebAuthn.RegistrationExtensionsClientOutputs? {
        val o = __offset(10)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_1_4()
        fun getRootAsRegisterPublicKeyCredential(_bb: ByteBuffer): RegisterPublicKeyCredential = getRootAsRegisterPublicKeyCredential(_bb, RegisterPublicKeyCredential())
        fun getRootAsRegisterPublicKeyCredential(_bb: ByteBuffer, obj: RegisterPublicKeyCredential): RegisterPublicKeyCredential {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createRegisterPublicKeyCredential(builder: FlatBufferBuilder, idOffset: Int, rawIdOffset: Int, responseOffset: Int, clientExtensionResultsOffset: Int) : Int {
            builder.startTable(4)
            addClientExtensionResults(builder, clientExtensionResultsOffset)
            addResponse(builder, responseOffset)
            addRawId(builder, rawIdOffset)
            addId(builder, idOffset)
            return endRegisterPublicKeyCredential(builder)
        }
        fun startRegisterPublicKeyCredential(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun createIdVector(builder: FlatBufferBuilder, data: UByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i].toByte())
            }
            return builder.endVector()
        }
        fun startIdVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        fun addRawId(builder: FlatBufferBuilder, rawId: Int) = builder.addOffset(1, rawId, 0)
        fun createRawIdVector(builder: FlatBufferBuilder, data: UByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i].toByte())
            }
            return builder.endVector()
        }
        fun startRawIdVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        fun addResponse(builder: FlatBufferBuilder, response: Int) = builder.addOffset(2, response, 0)
        fun addClientExtensionResults(builder: FlatBufferBuilder, clientExtensionResults: Int) = builder.addOffset(3, clientExtensionResults, 0)
        fun endRegisterPublicKeyCredential(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
