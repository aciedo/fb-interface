namespace Auth.WebAuthn;

enum AttestationConveyancePreference:byte {
    /// Do not request attestation.
    /// <https://www.w3.org/TR/webauthn/#dom-attestationconveyancepreference-none>
    None,

    /// Request attestation in a semi-anonymized form.
    /// <https://www.w3.org/TR/webauthn/#dom-attestationconveyancepreference-indirect>
    Indirect,

    /// Request attestation in a direct form.
    /// <https://www.w3.org/TR/webauthn/#dom-attestationconveyancepreference-direct>
    Direct,
}

table CredentialCreationOptions {
    /// The relying party 
    rp: RelyingParty;
     /// The user.
    user: User;
    /// The one-time challenge for the credential to sign
    challenge: [ubyte];
    /// The set of cryptographic types allowed by this server.
    pub_key_cred_params: [PubKeyCredParams];
     /// The timeout for the authenticator to stop accepting the operation
    timeout: uint32 = 60000;
    /// The requested attestation level from the device.
    attestation: AttestationConveyancePreference;
    /// The list of credentials that are excluded from this operation.
    exclude_credentials: [PublicKeyCredentialDescriptor];
    /// The list of authenticators that are allowed for this operation.
    authenticator_selection: AuthenticatorSelectionCriteria;
    /// The extensions that are allowed for this operation.
    extensions: RequestRegistrationExtensions;
}

enum AuthenticatorTransport:byte {
    /// <https://www.w3.org/TR/webauthn/#dom-authenticatortransport-usb>
    Usb,
    /// <https://www.w3.org/TR/webauthn/#dom-authenticatortransport-nfc>
    Nfc,
    /// <https://www.w3.org/TR/webauthn/#dom-authenticatortransport-ble>
    Ble,
    /// <https://www.w3.org/TR/webauthn/#dom-authenticatortransport-internal>
    Internal,
    /// Hybrid transport, formerly caBLE. Part of the level 3 draft specification.
    /// <https://w3c.github.io/webauthn/#dom-authenticatortransport-hybrid>
    Hybrid,
    /// Test transport; used for Windows 10.
    Test,
}

table AuthenticatorAttestationResponse {
    client_data: [ubyte];
    attestation_object: [ubyte];
    transports: [AuthenticatorTransport];
}

enum CredentialProtectionPolicy:byte {
    /// This reflects "FIDO_2_0" semantics. In this configuration, performing
    /// some form of user verification is optional with or without credentialID
    /// list. This is the default state of the credential if the extension is
    /// not specified.
    UserVerificationOptional = 0,
    /// In this configuration, credential is discovered only when its
    /// credentialID is provided by the platform or when some form of user
    /// verification is performed.
    UserVerificationOptionalWithCredentialIDList = 1,
    /// This reflects that discovery and usage of the credential MUST be
    /// preceded by some form of user verification.
    UserVerificationRequired = 2,
}

table RegistrationExtensionsClientOutputs {
    app_id: bool;
    cred_props: bool;
    hmac_secret: bool;
    cred_protect: CredentialProtectionPolicy;
    min_pin_length: uint32;
}

table RegisterPublicKeyCredential  {
    id: [ubyte];
    raw_id: [ubyte];
    response: AuthenticatorAttestationResponse;
    client_extension_results: RegistrationExtensionsClientOutputs;
}

table CredProtect {
     /// The credential policy to enact
    credential_protection_policy: CredentialProtectionPolicy;
    /// Whether it is better for the authenticator to fail to create a
    /// credential rather than ignore the protection policy
    enforce_credential_protection_policy: bool = false;
}

table RequestRegistrationExtensions {
    /// The `credProtect` extension options
    cred_protect: CredProtect;
    /// ⚠️  - Browsers do not support this!
    uvm: bool;
    /// ⚠️  - This extension result is always unsigned, and only indicates if the
    /// browser *requests* a residentKey to be created. It has no bearing on the
    /// true rk state of the credential.
    cred_props: bool;
    /// CTAP2.1 Minumum pin length
    min_pin_length: bool;
    /// ⚠️  - Browsers support the *creation* of the secret, but not the retrieval of it.
    /// CTAP2.1 create hmac secret
    hmac_create_secret: bool;
}

table PublicKeyCredentialDescriptor {
    /// The type of credential to exclude.
    type: string;
    /// The credential ID to exclude.
    id: [ubyte];
    /// The transports that are allowed for this credential.
    transports: [AuthenticatorTransport];
}

enum AuthenticatorAttachment:byte {
    /// Request a device that is part of the machine aka inseperable.
    /// <https://www.w3.org/TR/webauthn/#attachment>
    Platform,
    /// Request a device that can be seperated from the machine aka an external token.
    /// <https://www.w3.org/TR/webauthn/#attachment>
    CrossPlatform,
}

enum UserVerificationPolicy:byte {
    /// <https://www.w3.org/TR/webauthn/#dom-userverificationrequirement-preferred>
    Preferred,
    /// <https://www.w3.org/TR/webauthn/#dom-userverificationrequirement-required>
    Required,
    /// <https://www.w3.org/TR/webauthn/#dom-userverificationrequirement-discouraged>
    Discouraged,
}

table AuthenticatorSelectionCriteria {
    /// The authenticator attachment mode.
    authenticator_attachment: AuthenticatorAttachment;
    /// Whether or not the authenticator must be resident.
    require_resident_key: bool;
    /// The list of authenticator transports that are allowed.
    user_verification: UserVerificationPolicy;
}

table PubKeyCredParams {
    type: string;
    alg: int32;
}

table RelyingParty {
    id: string;
    name: string;
}

table User {
    id: [ubyte];
    name: string;
    display_name: string;
}